<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="working-with-documents">
		<title>Working With Documents</title>
		<body>
			<p>A document in Couchbase server consists of a 
				<i>key</i>, 
				<i>value</i>, and 
				<i>metadata</i>.
			</p>
			<ul>
				<li>
					<i>Key</i>
					<p></p>   A key is a unique identifier for your data. Each document must have a unique   key. The key can be any valid Unicode string.
				</li>
				<li>
					<i>Value</i>
					<p></p>   The value is your own application data that exists under the key. The format of   the value can be anything. By default, only JSON-serializable objects are   supported — Python 
					<codeph>str</codeph>, 
					<codeph>unicode</codeph>, 
					<codeph>dict</codeph>, 
					<codeph>list</codeph>, 
					<codeph>tuple</codeph>, 
					<codeph>int</codeph>, 
					<codeph>long</codeph>,
					<codeph>float</codeph>, 
					<codeph>bool</codeph>, and 
					<codeph>None</codeph> types — in short, anything that the standard
					<codeph>json.dumps</codeph> accepts. The reason JSON is the default format is for the ability   to later query the database based on value contents, as will be explained later.
					<p></p>   You can also store arbitrary Python objects using the 
					<codeph>FMT_PICKLE</codeph> value for the
					<codeph>format</codeph> option.
				</li>
				<li>
					<i>Metadata</i>
					<p></p>   The metadata contains information concerning the format of the value that is,   whether it’s JSON, Pickle, or something else. It also contains revision   information such as the 
					<i>CAS</i>, which we’ll read about later.
				</li>
			</ul>
			<p>You can 
				<i>store</i> documents by providing the unique 
				<i>key</i> under which the document
				will be stored, and the 
				<i>value</i> which contains the actual document. You can

				<i>retrieve</i> documents either by directly specifying the unique 
				<i>key</i> under which
				the document was stored or by querying 
				<i>views</i> that retrieve documents based on
				specific 
				<i>criteria</i>.
			</p>
		</body>
		
		
		<topic id="getting-documents-by-key">
			<title>Getting Documents By Key</title>
			<body>
				<p>Couchbase provides two ways to fetch your documents: you can retrieve a document
					by its 
					<i>key</i>, or you can retrieve a set of documents that match some constraint
					by using Views. Because views are more complex, we’ll first demonstrate getting
					documents by their keys.
				</p>
				<p>To get a single document, simply supply the key as the first argument to the

					<codeph>get</codeph> method. It returns a 
					<codeph>Result</codeph> object on success that can then be used to
					extract the value.
				</p>
			</body>
		</topic>
		<topic id="getting-a-single-document">
			<title>Getting A Single Document</title>
			<body>
				<codeblock>
client.store("my list", [])
result = client.get("my list")
doc = result.value</codeblock>
				<p>To get multiple documents, you can use the more efficient 
					<codeph>get_multi</codeph> method.
					You pass it an iterable sequence of keys, and it returns a 
					<codeph>MultiResult</codeph> object
					with the keys passed to 
					<codeph>get_multi</codeph> as keys, and the values being a 
					<codeph>Result</codeph>
					object for the result of each key. 
					<codeph>MultiResult</codeph> is a subclass of 
					<codeph>dict</codeph>.
				</p>
			</body>
		</topic>
		<topic id="getting-multiple-documents">
			<title>Getting Multiple Documents</title>
			<body>
				<codeblock>
client.set_multi({
    'sheep_counting' : ['first sheep', 'second sheep'],
    'famous_sheep' : {'sherry lewis' : 'Lamb Chop'}
})

keys = ('sheep_counting', 'famous_sheep')
results = client.get_multi(keys)
for key, result in results.items():
    doc = result.value</codeblock>
			</body>
		</topic>
		<topic id="error-handling">
			<title>Error Handling</title>
			<body>
				<p>If a document does not exist, a 
					<codeph>couchbase.exceptions.NotFoundError</codeph> (which is a
					subclass of 
					<codeph>couchbase.exceptions.CouchbaseError</codeph> ) is thrown.
				</p>
				<p>You can change this behavior by using the 
					<codeph>quiet</codeph> keyword parameter and setting
					it to true (to suppress exceptions for a specific 
					<codeph>get</codeph> call) or by setting the

					<codeph>Connection.quiet</codeph> property on the 
					<codeph>Connection</codeph> object (which suppresses
					exceptions on 
					<codeph>get</codeph> for subsequent calls).
				</p>
				<p>When using 
					<codeph>quiet</codeph>, you can still determine if a key was retrieved successfully
					by examining the 
					<codeph>success</codeph> property of the value object.
				</p>
			</body>
		</topic>
		<topic id="passing-quiet-to-get">
			<title>Passing quiet to get</title>
			<body>
				<codeblock>
result = client.get("non-exist-key", quiet=True)
if result.success:
    print "Got document OK"
else:
    print ("Couldn't retrieve document. "
           "Result was received with code"), result.rc</codeblock>
			</body>
		</topic>
		<topic id="setting-quiet-in-the-constructor">
			<title>Setting quiet in the constructor</title>
			<body>
				<codeblock>
client = Couchbase.connect(bucket='default', quiet=True)
result = client.get("non-exist-key")
if result.success:
    print "Got document OK"
else:
    print "Couldn't retrieve document"</codeblock>
				<p>The 
					<codeph>rc</codeph> property of the 
					<codeph>Result</codeph> object contains the error code received on
					failure (on success, its value is 
					<codeph>0</codeph> ). You can also obtain the exception class
					which would have been thrown by using
				</p>
				<codeblock>
&gt;&gt;&gt; CouchbaseError.rc_to_exctype(result.rc)
&lt;class 'couchbase.exceptions.NotFoundError'&gt;</codeblock>
				<p>This class method is passed an error code and produces the appropriate exception
					class.</p>
				<p>When using 
					<codeph>get_multi</codeph> with the quiet option enabled, you can immediately
					determine whether all the keys were fetched successfully by examining the

					<codeph>all_ok</codeph> property of the returned 
					<codeph>MultiResult</codeph> object.
				</p>
				<codeblock>
results = client.get_multi(("i exist", "but i don't"), quiet=True)
if not results.all_ok:
    print "Couldn't get all keys"</codeblock>
			</body>
		</topic>
		<topic id="getting-documents-by-querying-views">
			<title>Getting Documents by Querying Views</title>
			<body>
				<p>In addition to fetching documents by keys, you can also employ 
					<i>Views</i> to
					retrieve information using secondary indexes. This guide gets you started on how
					to use them from the Python SDK. If you want to learn more about views, see the
					[chapter in the Couchbase Server 2.0
					documentation](http://www.couchbase.com/docs/couchbase-manual-2.0/couchbase-views.html).
				</p>
				<p>First, create your view definition using by the web UI (though you may also do
					this directly from the Python SDK, as will be shown later).</p>
				<p>You can then query the view results by calling the 
					<codeph>query</codeph> method on the

					<codeph>Connection</codeph> object. Simply pass it the design and view name.
				</p>
				<codeblock>
view_results = client.query("beer", "brewery_beers")
for result in view_results:
    print "Mapped key: %r" % (result.key,)
    print "Emitted value: %r" % (result.value,)
    print "Document ID: %s" % (result.docid,)</codeblock>
				<p>The 
					<codeph>query</codeph> method returns a 
					<codeph>couchbase.views.iterator.View</codeph> object, which is an
					iterator. You can simply iterate over it to retrieve the results for the query.
					Each object yielded is a 
					<codeph>ViewRow</codeph>, which is a simple object containing the key,
					value, document ID, and optionally the document itself for each of the results
					returned by the view.
				</p>
				<p>In addition to the design and view name, the 
					<codeph>query</codeph> method accepts additional
					keyword arguments that control the behavior of the results returned. You can
					thus use it as follows:
				</p>
				<codeblock>
results = client.query("beer", "brewery_beers", opt1=value1, opt2=value2, ...)
for result in results:
    # do something with result..</codeblock>
				<p>Here are some of the available parameters for the 
					<codeph>query</codeph> method. A full listing
					can be found in the API documentation.
				</p>
				<ul>
					<li>
						<codeph>include_docs</codeph>
						<p></p>   This boolean parameter indicates whether the corresponding document should be   retrieved for each row fetched. If this is true, the 
						<codeph>doc</codeph> property of the
						<codeph>ViewRow</codeph> object yielded by the iterator returned by 
						<codeph>query</codeph> contains a 
						<codeph>Result</codeph>   object that contains the document for the key.
					</li>
					<li>
						<codeph>reduce</codeph>
						<p></p>   This boolean parameter indicates whether the server should also pass the results   to the view’s 
						<codeph>reduce</codeph> function. An exception is raised if the view does not   have a 
						<codeph>reduce</codeph> method defined.
					</li>
					<li>
						<codeph>limit</codeph>
						<p></p>   This numeric parameter indicates the maximum amount of results to fetch from the   query. This parameter is handy if your query can produce a lot of results.
					</li>
					<li>
						<codeph>descending</codeph>
						<p></p>   This boolean parameter indicates that the results should be returned in reverse   order.
					</li>
					<li>
						<codeph>stale</codeph>
						<p></p>   This boolean parameter controls the tradeoff between performance and freshness   of data.
					</li>
					<li>
						<codeph>debug</codeph>
						<p></p>   This boolean parameter fetches low-level debugging information from the view   engine.
					</li>
					<li>
						<codeph>streaming</codeph>
						<p></p>   This boolean parameter indicates whether the view results should be decoded in a
						<i>streaming</i> manner. When enabled, the iterator internally fetches chunks of the   response as required.
						<p></p>   As this is less efficient than fetching all results at once, it is disabled by   default, but can be very useful if you have a large dataset because it prevents   the entire view from being buffered in memory.
					</li>
				</ul>
				<codeblock>
results = client.query("beer", "brewery_beers",
                       include_docs=True, limit=5)

for result in results:
    print "key is %r" % (result.key)
    doc = result.doc.value
    if doc['type'] == "beer":
        print "Got a beer. It's got %0.2f ABV" % (doc['abv'],)</codeblock>
			</body>
		</topic>
		<topic id="encoding-and-serialization">
			<title>Encoding and Serialization</title>
			<body>
				<p>The default encoding format for the Python SDK is JSON. This means you can pass
					any valid object that is accepted by the standard 
					<codeph>json.dumps</codeph> library function
					and you will receive it back when you retrieve it.
				</p>
				<codeblock>
# -*- coding: utf-8 -*-

import pprint
from couchbase import Couchbase

client = Couchbase.connect(bucket='default', host='localhost')
value = {
    "this is a" : "dictionary",
    "and this is a list" : ["with", "some", "elements"],
    "and this is a tuple" : ("with", "more", "elements"),
    "you can also use floats" : 3.14,
    "integers" : 42,
    "strings" : "hello",
    "unicode" : "שלום!",
    "blobs" : "\x00",
    "or a None" : None
}

client.set("a_key", value)
result = client.get("a_key")
pprint.pprint(result.value)
print result.value['unicode']</codeblock>
				<p>Which then prints</p>
				<codeblock>
{u'and this is a list': [u'with', u'some', u'elements'],
 u'and this is a tuple': [u'with', u'more', u'elements'],
 u'blobs': u'\x00',
 u'integers': 42,
 u'or a None': None,
 u'strings': u'hello',
 u'this is a': u'dictionary',
 u'unicode': u'\u05e9\u05dc\u05d5\u05dd!',
 u'you can also use floats': 3.14}
שלום!</codeblock>
				<p>To view the document you just created, go to 
					<codeph>localhost:8091</codeph> in
					your browser, type in your administrative credentials, go over to the *Data
					Buckets
					<i>pane, click on the</i>Documents* button for the 
					<codeph>default</codeph> bucket, and
					type in the ID for the document (in this case, it’s 
					<codeph>a_key</codeph> )). The document can
					now be indexed and queried against using views.
				</p>
			</body>
		</topic>
		<topic id="other-formats">
			<title>Other Formats</title>
			<body>
				<p>While JSON is the default format, you might want to use other formats. For
					example, if you want to store complex custom Python objects and classes and
					don’t require that they be indexed with views, you can use the 
					<codeph>pickle</codeph>
					serialization format. It allows you to store types that are not accepted by
					JSON:
				</p>
				<codeblock>
import pprint

from couchbase import Couchbase, FMT_PICKLE

c = Couchbase.connect(bucket='default')
c.set("a_python_object", object(), format=FMT_PICKLE)
c.set("a_python_set", set([1,2,3]), format=FMT_PICKLE)

pprint.pprint(c.get("a_python_object").value)
pprint.pprint(c.get("a_python_set").value)</codeblock>
				<p>Outputs:</p>
				<p>
					<codeph>&lt;object object at 0x7fa7d0ad80e0&gt; set([1, 2, 3])</codeph> You can also store arbitrary
					strings of bytes by using 
					<codeph>FMT_BYTES</codeph>.
				</p>
				<p>In Python 2.6 and above 
					<codeph>bytes</codeph> and 
					<codeph>str</codeph> are the same type; however in Python
					3, a 
					<codeph>str</codeph> is a string with an encoding (i.e. Python 2’s 
					<codeph>unicode</codeph> ) while

					<codeph>bytes</codeph> is a sequence of bytes which must be explicitly converted in order to be
					used with text operations.
				</p>
				<codeblock>
import pprint

from couchbase import Couchbase, FMT_BYTES

c = Couchbase.connect(bucket='default')
c.set("blob", b"\x01\x02\x03\x04", format=FMT_BYTES)
pprint.pprint(c.get("blob").value)</codeblock>
				<p>Outputs</p>
				<p>
					<codeph>b'\x01\x02\x03\x04'</codeph> Alternatively, you can use 
					<codeph>FMT_UTF8</codeph> to store a 
					<codeph>unicode</codeph>
					object represented as 
					<i>UTF-8</i>.
				</p>
				<p>While JSON is also capable of storing strings and Unicode, the JSON
					specification mandates that all strings begin and end with a quote ( 
					<codeph>"</codeph> ). This
					uses additional space and costs extra processing power to decode and encode your
					JSON string. Therefore,you can save on performance by using 
					<codeph>FMT_UTF8</codeph> for
					simple strings.
				</p>
				<p>It is possible to encode your data by using encodings other than 
					<i>UTF-8</i>.
					However, because the view engine operates using 
					<i>UTF-8</i>, we selected this as the
					default. If you need a different encoding, consider using the 
					<codeph>Transcoder</codeph>
					interface.
				</p>
				<codeblock>
from couchbase import Couchbase, FMT_UTF8

c = Couchbase.connect(bucket='default')
c.set("EXCALIBUR", u"\u03EE", format=FMT_UTF8)
print c.get("EXCALIBUR")</codeblock>
				<p>Outputs</p>
				<codeblock>
ValueResult&lt;RC=0x0, Key=EXCALIBUR, Value=u'\u03ee', CAS=0x6552956a925e0400, Flags=0x4&gt;</codeblock>
			</body>
		</topic>
		<topic id="setting-the-default-format">
			<title>Setting The Default Format</title>
			<body>
				<p>You can set the default format for the value type you use most by setting the

					<codeph>default_format</codeph> property on the connection object, either during construction
					or afterwards:
				</p>
				<codeblock>
c = Couchbase.connect(bucket='default', default_format=FMT_UTF8)</codeblock>
				<p>Or</p>
				<codeblock>
c.default_format = FMT_PICKLE</codeblock>
			</body>
		</topic>
	</topic>
