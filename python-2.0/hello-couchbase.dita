<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_kvs_1lz_2q">
	<title>Hello Couchbase</title><shortdesc>This example works with the "beer-sample" bucket that is provided with the default
		install.</shortdesc>
    <body>
        <p>To follow the tradition of programming tutorials, we’ll start with "Hello Couchbase."
            </p>
        <codeblock spectitle="hello-couchbase.py" outputclass="language-python">from couchbase.bucket import Bucket
from couchbase.exceptions import CouchbaseError

c = Bucket('couchbase://localhost/beer-sample')

try:
    beer = c.get("aass_brewery-juleol")

except CouchbaseError as e:
    print "Couldn't retrieve value for key", e
    # Rethrow the exception, making the application exit
    raise

doc = beer.value

# Because Python 2.x will complain if an ASCII format string is used
# with Unicode format values, we make the format string unicode as well.


print unicode("{name}, ABV: {abv}").format(name=doc['name'], abv=doc['abv'])

doc['comment'] = "Random beer from Norway"

try:
    result = c.replace("aass_brewery-juleol", doc)
    print result

except CouchbaseError as e:
    print "Couldn't replace key"
    raise</codeblock>
        <p>The following points explain each step in the example:</p>
        <ul id="ul_i5d_dlz_2q">
            <li><i>Connecting</i><p>The <codeph>Bucket</codeph> instance represents a connection to
					a single bucket within the cluster. In this example we instantiate a bucket with a
						<term>connection string</term>; this is a URI-like string which allows you to
					concisely provide the location of the Couchbase cluster you are connecting to. The
					scheme used is <i>couchbase</i>, the host is <i>localhost</i>, and the bucket,
					provided as the path of the connection string, is <i>beer-sample</i>.</p><p>A bucket
					represents a logical namespace for a key. All keys must be unique within a single
					bucket, but multiple buckets can have keys with the same names and they will not
					conflict. A new connection object must be created for each bucket that you want to
					interact with in your application. This example creates one connection to the
						<codeph>beer-sample</codeph> bucket. </p></li>
            <li><i>Retrieving Data</i>
				<p>The <codeph>get</codeph> method retrieves the value for the key requested. If the key
					exists, a <codeph>Result</codeph> object that contains the value of the key as well
					as additional metadata is returned. To get the actual value of the object, you can
					access the <codeph>Result</codeph> object’s <codeph>value</codeph> property.</p><p>If
					the key does not exist on the server, an exception of type
						<codeph>CouchbaseError</codeph> is thrown. This exception object can be caught and
					examined or printed to see more details about why the operation failed. See the API
					documentation for more details.</p><p>We treat the <codeph>value</codeph> as a
						<codeph>dict</codeph> object. As a documented oriented database, values stored to
					the server are considered to be JSON by default, and when retrieved from the server
					are interpreted to be JSON (and unserialized into a Python <codeph>dict</codeph> ).
					It is possible to use other formats than the default JSON, however. The
						<codeph>upsert</codeph> methods accept a <codeph>format</codeph> keyword argument
					that indicates the conversion type to be used. The default is
						<codeph>couchbase.FMT_JSON</codeph>, but you can also use
						<codeph>couchbase.FMT_BYTES</codeph>, <codeph>couchbase.FMT_UTF8</codeph>, or
						<codeph>couchbase.FMT_PICKLE</codeph> instead. If none of these are sufficient,
					you can write your own custom <codeph>Transcoder</codeph> object to handle conversion
					on your own.</p><p>Starting from version 1.1.0, you may also use the
						<codeph>couchbase.FMT_AUTO</codeph> flag which will guess the suitable format
					based on the Python data type being passed. </p></li>
            <li><i>Storing Data</i><p>To store documents in the server, you can use one of the
						<codeph>upsert</codeph> family of methods. Here we use <codeph>replace</codeph>,
					which enforces the constraint that a previous value of the document must already
					exist. This can be thought of as an update operation in terms of CRUD (create, read,
					update, delete).</p><p>The storage methods also return a <codeph>Result</codeph>
					object that contains metadata about the value stored. </p></li>
        </ul>
    </body>
</topic>
