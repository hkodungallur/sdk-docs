<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vqw_djq_44">
    <title>Handling errors</title>
	<shortdesc>All methods within the Python client will raise an exception if they fail.</shortdesc>
    <conbody>
        
        <p>In typical cases an instance of type <apiname>CouchbaseError</apiname> (or a subclass
            thereof) will be thrown. This can be caught by the application and handled
            appropriately. The exception object itself contains various properties which can assist
            in developing applications which efficiently handle exceptions.</p>
        <p>Applications may use the <apiname>is_data</apiname> property on a
                <apiname>CouchbaseError</apiname> instance to determine if the error is a negative
            reply from the server; the property will evaluate to <codeph>True</codeph> for
            situations where a key is not found, already exists, and so on. Likewise applications
            may use the <apiname>is_network</apiname> property to determine if the exception is a
            result of a potential network issue (and is thus not an issue with the data, but rather
            an issue concerning the connectivity between client and server).</p>
        <p>All exceptions which are either data errors or network errors will contain a non-zero
            status code from the underlying C library; this status code may be obtained using the
                <apiname>rc</apiname> property of the exception. Exceptions which contain an
                <apiname>rc</apiname> value of 0 are typically <apiname>ArgumentErrors</apiname>
            which are thrown when a method was supplied with an invalid parameter, or an invalid
            combination of parameters.</p>
    </conbody>
</concept>
