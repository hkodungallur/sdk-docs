<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yny_mhq_44">
	<title>Retrieving documents</title>
	<shortdesc>You can retrieve documents by using regular reads or replica reads.</shortdesc>
	<conbody>

		<section><title>Regular reads </title>
			<p>You perform regular reads by using the <codeph>get()</codeph> method. Regular reads
				enable you to retrieve a previously stored document from your active data set. To access
				the value retrieved, use the returned value's <codeph>value</codeph> property.</p>
			<p>The following examples show regular reads:</p><codeblock outputclass="language-python" spectitle="Sync/gevent API">rv = bucket.get('document_name')
print "Result object is:", rv
print "Actual value is:", rv.value</codeblock>
			<p>Sample output: </p><screen>Result object is ValueResult&lt;RC=0x0, Key=u'document_name', Value={u'some': u'value'}, 
   CAS=0x20504a5e6a5aaa13, Flags=0x2000000>
Actual value is {u'some': u'value'}</screen>
			<codeblock outputclass="language-python" spectitle="Twisted API">def on_ok(result):
    print "Got item. Result is", result
    print "Value is", result.value

def on_err(failure):
    print "Couldn't store!", failure

d_get = bkt.get('document_name')
d_get.addCallbacks(on_ok, on_err)</codeblock>
			<p>Sample
				output:</p><screen>Got item. Result is ValueResult&lt;RC=0x0, Key=u'document_name', Value={u'some': u'value'}, 
   CAS=0x20504a5e6a5aaa13, Flags=0x2000000>
Value is {u'some': u'value'}</screen><p>If
				the item does not exist, the client will raise a
					<apiname>couchbase.exceptions.NotFoundError</apiname>, which you can
			catch:</p><codeblock outputclass="language-python" spectitle="Missing item; Sync API">from couchbase.exceptions import NotFoundError
try:
    rv = bkt.get('NOTEXISTENT')
except NotFoundError as e:
    print "Item not found", e</codeblock><codeblock spectitle="Missing item; Twisted API" outputclass="language-python">def on_err(failure):
   failure.trap(NotFoundError)
   print "Item not found!"</codeblock>You
			can also pass the <codeph>quiet=True</codeph> keyword argument to the
				<apiname>get()</apiname> method to tell the client <i>not</i> to raise an exception if
			the key is not found. If the <codeph>quiet</codeph> option is passed, you may check the
			returned <codeph>Result</codeph> object's <codeph>success</codeph> property to determine if
			the retrieval was
			successful.<codeblock>rv = bkt.get('maybe', quiet=True)
if rv.success:
    handle_value(rv)
else:
    print "Item not found"</codeblock></section>

		<section>
			<title>Replica reads</title>
			<p>You perform replica reads by passing the <codeph>replica=True</codeph> keyword argument
				to the <apiname>get()</apiname> method. Replica reads enable you to retrieve a
				previously stored document by querying the replica copies of this document rather than
				the active one. This is not guaranteed to be consistent, but does permit a level of
				recovery in case the primary server is not reachable.</p>
		</section>

	</conbody>
</concept>
