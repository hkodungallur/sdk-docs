<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_edq_vdv_t4">
 <title>Operation basics</title>
 <shortdesc>Operations use basic Python data types.</shortdesc>
 <conbody>
 	<section>
 		<title>Data types</title>
 		<p>All Python objects which can be represented as JSON may be passed unmodified to a storage
				function, and be received via the <apiname>get</apiname> method without any
				additional modifications.</p>
			<p>Storage operations accept a <i>format</i> keyword argument which may be one of
					<option>FMT_JSON</option> (to indicate the object should be serialized as JSON),
					<option>FMT_UTF8</option> (to serialize the object as a UTF-8 encoded string),
					<option>FMT_BYTES</option> (to serialize an object as a raw set of bytes; note
				the Python object in question must be of type <codeph>bytes</codeph>),
					<option>FMT_PICKLE</option> (to serialize an object using Python's native
					<codeph>pickle</codeph> module). You may also define new formats and utilize
				them via a <i>custom transcoder</i> (see the API documentation for details).</p>
 	</section>
 	
 	<section>
			<title>Return Types</title>
			<p>All Python SDK operations return a <codeph>Result</codeph> object (or a subclass thereof). The
				result object contains general operation information and item metadata retrieved
				from the server. Typically a <i>subclass</i> of <codeph>Result</codeph> will be
				returned which also contains operation-specific result information, such as the
					<codeph>value</codeph> field for a <apiname>get()</apiname> operation. The most
				common fields in a <apiname>Result</apiname> object are:</p>
 		<table id="table_ivk_pcn_2q">
				<tgroup cols="2">
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><codeph>value</codeph></entry>
							<entry>For retrieval-type operations, this field contains the value of
								the requested key.</entry>
						</row>
						<row>
							<entry><codeph>rc</codeph></entry>
							<entry>Contains the raw error code received from <i>libcouchbase</i>. If
								this number is zero then the operation was successful; otherwise it
								will be an error. The
									<apiname>CouchbaseError.rc_to_exctype()</apiname> class method
								can be used to return the exception class which would have been
								thrown.</entry>
						</row>
						<row>
							<entry><codeph>success</codeph></entry>
							<entry>This is a convenience property which is equivalent to <codeph>rc == 0</codeph></entry>
						</row>
						<row>
							<entry><codeph>cas</codeph></entry>
							<entry>An opaque object representing the resulting CAS value of the key
								that was operated on. This value is not meant to be user facing, but
								should be passed directly to other operations for locking
								purposes.</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<p>Note that for Twisted APIs, these objects are not returned per se, but rather a
					<apiname>Deferred</apiname> object is returned, and the appropriate
					<apiname>Result</apiname> or <apiname>Failure</apiname> object is passed into
				the callback or errback, respectively.</p>
		</section>
		<section>
			<title>Exceptions</title>
			<p>When operations fail in the Python SDK, an exception will be thrown. All exceptions
				thrown are a subclass of <apiname>CouchbaseError</apiname>. Exceptions themselves
				will contain information relating to why and where the operation failed.</p>
            <p>Exceptions are grouped into several categories (these are all named
                    <codeph>Couchbase${ERRTYPE}Error</codeph> where <codeph>${ERRTYPE}</codeph> is a
                specific category. You may <codeph>except</codeph> specific error clasifiers in
                addition to catching specific errors.</p>
		</section>
 </conbody>
</concept>
