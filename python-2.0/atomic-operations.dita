<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_iqn_nhq_44">
 <title>Atomic operations</title>
	<shortdesc>The Python SDK supports several operations that allow one-step, atomic changes to
        documents. These operations include counter, prepend, and append functions.</shortdesc>
 <conbody>
		
		<section>
			<title>Counter operation</title>
			<p>The <codeph>counter()</codeph> method enables you to implement an atomic counter as a
                Couchbase document. These operations expect ASCII string representations of the
                number. You can either execute this operation against a previously created document,
                or create a new document by using the <codeph>initial</codeph> keyword argument
                passed as an option. More information about the initial property is available below.
                Note the <codeph>delta</codeph> keyword argument, which indicates the <i>numeric
                    offset</i> by which to modify the existing value; if negative then the counter
                is decremented, if positive then the counter is incremented.</p>
		<p>The following example shows how to use the <codeph>counter()</codeph> method to increment your
				counter and get the value back:</p>
		<p>
			<codeblock outputclass="language-python">cb = Bucket('couchbase://192.168.33.101/default')
rv = cb.counter('some_document', delta=1)
print rv</codeblock>
		</p>		
		<p>Sample output from the
                example:<screen>ValueResult&lt;RC=0x0, Key=u'some_document', Value=2L, CAS=0x6859680115c9ab13, Flags=0x0></screen></p>
			<p>The following example shows how to use the <codeph>counter()</codeph> method to decrement your
				counter and get the value back:</p>
			<p>
				<codeblock outputclass="language-python">cb.counter('some_document', delta=-1)</codeblock>
			</p>		
			<p>Sample output from the
                example:<screen>ValueResult&lt;RC=0x0, Key=u'some_document', Value=1L, CAS=0xa81cf6713bc9ab13, Flags=0x0></screen></p>
			<p>You can additionally perform a counter operation with an initial value specified. In this
                case, the document will be created if it does not exist. The
                    <codeph>initial</codeph> keyword argument will do nothing if the document
                already exists; likewise, the <codeph>delta</codeph> keyword argument will do
                nothing if the document does not
                exist.<codeblock outputclass="language-python"># Delete old counter to ensure it does not exist
cb.remove('some_document', quiet=False)
print "Storing counter for first time"
print cb.counter('some_document', delta=1, initial=10)
print "Modifying existing counter"
print cb.counter('some_document', delta=1, initial=10)</codeblock></p>
			<p>Sample output from the
                example:<screen>Storing counter for first time
ValueResult&lt;RC=0x0, Key=u'some_document', Value=10L, CAS=0x6883e52274c9ab13, Flags=0x0>
Modifying existing counter
ValueResult&lt;RC=0x0, Key=u'some_document', Value=11L, CAS=0xe8fc6d2374c9ab13, Flags=0x0></screen></p>
			<note>If a new counter document is created by using the <codeph>initial</codeph> keyword
                argument, the counter is set to the value of <codeph>initial</codeph>, not
                    <codeph>initial+offset</codeph>. </note>
		
		</section>

 	<section>
            <title>Append and prepend operations</title>
            <p>The append and prepend operations allow you to perform a binary append or prepend to
                a Couchbase document.</p>
            <note> This operation is performed without any consideration for data type and append
                raw bytes to the existing value, thus appending to any type of JSON document will
                invalidate the JSON; consider: <codeph>cb.upsert('json_doc',
                    {'some':'value'})</codeph> will result in the current value being stored as
                    <codeph>{"some":"value"}</codeph>. Doing something like
                    <codeph>cb.append('json_doc', 'another_value')</codeph> will result in the
                stored document looking like <codeph>{"some":"value"}"another_value"</codeph> which
                will fail on retrieval. Additionally, you <i>must</i> make use of the
                    <codeph>format</codeph> keyword argument, and set it to either
                    <codeph>FMT_UTF8</codeph> or <codeph>FMT_BYTES</codeph>.</note>
            <p>The following is an example of how to use the <apiname>append()</apiname> method to
                add further text to an already existing document:</p>
            <codeblock outputclass="language-python">from couchbase import FMT_UTF8
cb.upsert('some_document', 'comma,separated', format=FMT_UTF8)
cb.append('some_document', ',values', format=FMT_UTF8)
print cb.get('some_document')</codeblock>
            <p>Sample output from the
                example:<screen>ValueResult&lt;RC=0x0, Key=u'some_document', Value=u'comma,separated,values', CAS=0x30dfa69edbc9ab13, Flags=0x4000004></screen></p>
        </section>
 	
	</conbody>
</concept>
