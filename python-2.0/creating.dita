<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="storing-documents">
    <title>Creating Documents</title>
    <body>
        <p>This section provides a bit more insight on how to store documents. This is a
            prerequisite to demonstrate how to retrieve documents because there must be
            something to retrieve.</p>
        <p>There are additional storage methods beyond those described here, which are
            covered in the Advanced section, see 
            <xref format="html" scope="external" href="#_advanced_usage">Advanced Usage</xref>. These
            include manipulating numeric counters, setting expiration times for documents,
            and appending/prepending to existing values.
        </p>
        <p>The 
            <codeph>Connection</codeph> object provides the following store operations, which conform
            to the 
            <i>CRUD</i> model:
        </p>
        <ul>
            <li>
                <codeph>upsert(key, value)</codeph><p>Stores the document <codeph>value</codeph>
                    under the <codeph>key</codeph>. If the key did not previously exist, it is
                    created. If the key already exists, its existing value is overwritten with the
                    new contents of <codeph>value</codeph>.</p></li>
            <li>
                <codeph>insert(key, value)</codeph><p>Stores the document <codeph>value</codeph>
                    under the <codeph>key</codeph>, but only if <codeph>key</codeph>
                    <i>does not already exist</i>. If <codeph>key</codeph> already exists, an
                    exception is thrown.</p></li>
            <li>
                <codeph>replace(key, value)</codeph>
                <p><codeph>Replace</codeph> is the inverse of <codeph>insert</codeph>. It sets the
                    contents of <codeph>key</codeph> to <codeph>value</codeph>, but only if the
                        <i>key already exists</i>. If the key does not already exist, an exception
                    is thrown.</p></li>
            <li>
                <codeph>delete(key)</codeph><p>Deletes the <codeph>key</codeph> from the bucket.
                    Future attempts to access this key via <codeph>get</codeph> raise an exception
                    until something is stored again for this key using one of the
                        <codeph>set</codeph> methods.</p>
            </li>
        </ul>
    </body>
    <topic id="crud-example">
        <title>CRUD Example</title>
        <body>
            <p>The following code demonstrates the store operations.</p>
            <codeblock>from couchbase.bucket import Bucket
from couchbase.exceptions import CouchbaseError

key = "demo_key"
value = "demo_value"

# We use the 'default' bucket.
c = Bucket('couchbase://localhost')

print "Setting key {0} with value {1}".format(key, value)
result = c.upsert(key, value)
print "...", result

print ""
print "Getting value for key {0}".format(key)
result = c.get(key)
print "...", result

print ""
print "Creating new key {0} with value 'new_value'".format(key)
print "This will fail as '{0}' already exists".format(key)
try:
    c.add(key, "another value")
except CouchbaseError as e:
    print e

print "Replacing existing key {0} with new value".format(key)
result = c.replace(key, "new value")
print "...", "result"

print ""
print "Getting new value for key {0}".format(key)
result = c.get(key)
print "...", result

print ""
print "Deleting key", key
result = c.delete(key)
print "...", result

print ""
print "Getting value for key {0}. This will fail as it has been deleted".format(key)
try:
    c.get(key)
except CouchbaseError as e:
    print e

print ""
print "Creating new key {0} with value 'added_value'".format(key)
result = c.add(key, "added_value")
print "...", result

print "Getting the new value"
result = c.get(key)
print "...", result</codeblock>
            <p>Output:</p>
            <codeblock>
Setting key demo_key with value demo_value
... OperationResult&lt;RC=0x0, Key=demo_key, CAS=0x2fbbf239b45e0400&gt;

Getting value for key demo_key
... ValueResult&lt;RC=0x0, Key=demo_key, Value=u'demo_value', CAS=0x2fbbf239b45e0400, Flags=0x0&gt;

Creating new key demo_key with value 'new_value'
This will fail as 'demo_key' already exists
&lt;Key=u'demo_key', RC=0xC[Key exists (with a different CAS value)], Operational Error, Results=1, C Source=(src/multiresult.c,148)&gt;
Replacing existing key demo_key with new value
... result

Getting new value for key demo_key
... ValueResult&lt;RC=0x0, Key=demo_key, Value=u'new value', CAS=0xa047003ab45e0400, Flags=0x0&gt;

Deleting key demo_key
... OperationResult&lt;RC=0x0, Key=demo_key, CAS=0xa147003ab45e0400&gt;

Getting value for key demo_key. This will fail as it has been deleted
&lt;Key=u'demo_key', RC=0xD[No such key], Operational Error, Results=1, C Source=(src/multiresult.c,148)&gt;

Creating new key demo_key with value 'added_value'
... OperationResult&lt;RC=0x0, Key=demo_key, CAS=0xe91f0c3ab45e0400&gt;
Getting the new value
... ValueResult&lt;RC=0x0, Key=demo_key, Value=u'added_value', CAS=0xe91f0c3ab45e0400, Flags=0x0&gt;</codeblock>
        </body>
    </topic>
</topic>